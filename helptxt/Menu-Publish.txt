
[TOC]

# Publish

## Page Setup...
Setup the printing page when printing the results directly from CrossMgr.  Most users create HTML output, then print from there.

## Preview Print Results...
Shows how the results would look if printed.

## Print Results...
Prints formatted results directly to a printer.
Select the Categories you want to print in the dialog, the select the Printer and Print Options.

You can print results for a Category if there are riders of that Category in the race.

## Publish Results as Excel...
Publish the results in Excel format and opens Excel on the output file.

## Publish Results to HTML...
Publish the results as an HTML file and opens a browser on the output file.  Includes the Race Animation and the Chart.

## Publish HTML Results with FTP...
Publishes HTML formatted results over an FTP upload.  Also includes the option to print a large QR-Code with the race results URL.

Field|Description
:----|:----------
Ftp Host Name|Host name of the FTP server
Path on Host to Store Files|Directory to write the HTML file on the server.
User|User name to log into the FTP server.
Password|Password for the FTP server.
Automatically Upload Results During Race|If checked, CrossMgr will automatically upload results to the FTP server while the race is running (see below for details).
URL Path (optional)|The path to the race results url.  The HTML file name will be added to this path.
Race Results URL|Shows the full URL (URL Path + HTML file name)

If "Automatically Upload Results During Race" is selected, CrossMgr will automatically publish results with FTP while the race is running.

If you fill in the "URL Path", CrossMgr will open a browser on the "Race Results URL" after you press OK.  Use this to test whether the upload worked correctly and that the "Race Results URL" can access the FTP published file as expected.

The "Print Results URL as a QR Code..." button prints a page with the [QR Code](http://en.wikipedia.org/wiki/QR_code) corresponding to the URL Path and Race (QR Codes are square barcodes).
Print out this page and post it at the race.  Then, spectators can read the QR Code with their Smartphones to easily access the web Results page.

### Details, Logic and Example of Live Results:

Publishing results during a race does not slow down or lock up CrossMgr even if it loses the connection with the FTP server or the publish fails.  This is because publishing is run in a separate background thread.  You will not notice it is happening.

Results are published with FTP in a way that balances response time with bandwidth.

You will see a publish latency of 4 seconds after each group passes the line, and no updates when there are no events.
The latency will increase when riders get strung out, to a maximum of 32 seconds.

The update logic was inspired by [exponential-backoff](http://en.wikipedia.org/wiki/Exponential_backoff), also used in TCP/IP.
The idea is to minimize bandwidth and while while maximizing response time.

The update logic is only triggered when an event is received (a rider time).  For example, if all riders are on the back side of the course and there is no data input, no updates will occur.

An event starts a timer that fires 4 seconds in the future (the latencyTime).  When the timer fires, CrossMgr does an FTP upload.

If another event is received while the timer is running, nothing happens.  That event will just be included when the timer fires in the future.

When the upload occurs, the time is recorded.  Let lastUpdateTime = the time of the last update.

Now, say a new event is received, and the timer is not running.  Let deltaTime = eventTime - lastUpdateTime.

* If deltaTime > latencyTime then latencyTime = max(latencyTime * 2, 32)
* Else latencyTime = 4

The timer is started and fires "latencyTime" seconds into the future, and the process repeats.

To paraphrase, if the last update latency exceeds the gap from the last upload, the latency is doubled (to a max of 32 seconds).
If the gap exceeds the latency, the latency is reset back to 4 seconds.

For example, say the lap time is 5 minutes, and the bunch is all together.
The first rider in the bunch crosses the line on the next lap and triggers a 4 second timer.  While the timer is running, the rest of the group crosses the line.  After 4 seconds, the upload runs and includes the times of all riders.

Now the riders go out on the next lap.  There are no events, so no upload is triggered and no effort or bandwidth is wasted.

Now the riders come around again and we receive the leader's event.  Since the last update was more than 4 seconds ago (deltaTime > latencyTime), the timer resets to 4 seconds and starts.  The riders cross the line, the timer fires after 4 seconds, and we get another upload with 4 seconds of latency.

This is better than publishing on a fixed schedule like every 30 or 60 seconds.  On a fixed schedule, we waste bandwidth publishing an update even if nothing changes.  Worse, we may have a latency of up to 30 seconds after the leaders cross the line each lap, with average latency of 15 seconds.

Back to our example.  Say a break develops with a gap of 10 seconds.  We will see an update 4 seconds after the break, then 4 seconds after the group.  The timer is reset between the groups because the gap time (10 seconds) exceeds the last latency (4 seconds).

Say the break increases to 30 seconds and a chase group forms 10 seconds after that.  No problem - the logic will now do three publishes, each 4 seconds after the break, group and the bunch respectively.

Say the bunch now splits up with riders all strung out, and the bunch takes 2 minutes to pass the finish line.  We will see an update 4 seconds after the break, then 4 seconds after the chase group, then 4 seconds after the beginning of the bunch, then 8 seconds for the following stragglers, then 16 seconds, then 32 seconds (repeating) as all the stragglers go by.

When the leaders return, the timer will reset back to 4 seconds because the gap between the last bunch rider and the leaders exceeds 32 seconds.

So, this approach synchronizes publishing to groups in the race, and does nothing if there are no changes.  If riders get all strung out and there are no discernible groups anymore, it self-configures to do an update about every 30 seconds, which is the same as a fixed publishing approach.

## Publish Results to CrossResults.com...
Creates a CrossResults.com compatible file for all race categories.
Launches your web browser to the CrossResults.com upload page.

## Publish Results in USAC Excel Format...
Export the results for all race categories in a format acceptable to USA Cycling.

Columns in the exported spreadsheet are as follows:

Column|Description
:-----|:----------
rider place|Corresponds to the "Pos" field in CrossMgr [Results][].
race gender|The gender of the this Category as specified in [Categories][]
race discipline|As specified in the race [Properties][].  This must match the USAC standard discipline name.
race category|The name of the Category of this rider as specified in [Categories][].
rider last name|Corresponds to the rider's "LastName" as configured in the [External Excel][] sheet.
rider first name|Corresponds to the rider's "FirstName" as configured in the [External Excel][] sheet.
rider team|Corresponds to the rider's "Team" as configured in the [External Excel][] sheet.
time|Corresponds to the "Time" field in CrossMgr [Results][].

In the "rider place" column, USAC only recognizes a place (number) and the statuses "DNF", "DNS" and "DNP" (Did Not Place).

CrossMgr's additional statuses "PUL" (Pulled), "DQ" (Disqualified), "OTL" (Outside Time Limit) and "NP" (Not Placed) are output as "DNP" (Did Not Place) in the USAC export.

## Publish Results for Facebook (as PNG)...
Publish the results as PNG formatted files suitable for posting to Facebook or Tumblr, which do not allow PDF or HTML content.
The PNG files are written into a folder called ResultsPNG in the same folder as the CrossMgr race file.

Although "quick and dirty", this is not recommended way to publish to Facebook.  See [Facebook][] for better suggestions.


